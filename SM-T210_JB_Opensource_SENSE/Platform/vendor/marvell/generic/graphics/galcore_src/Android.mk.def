##############################################################################
#
#    Copyright (c) 2005 - 2012 by Vivante Corp.
#    
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the license, or
#    (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program; if not write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
##############################################################################


#
# Common include file for Android build
#

################################################################################
# Options.

# Select prebuilt binary types.
FIXED_ARCH_TYPE              ?=

# Set this variable to Kernel directory.
KERNEL_DIR                   ?= $(ANDROID_BUILD_TOP)/kernel/kernel

# Cross compiler for building kernel module.
CROSS_COMPILE                ?= arm-eabi-

# <ro.hardware> property, which comes from 'Hardware' field of
# 'cpuinfo' of the device.
RO_HARDWARE                  ?= marvell

# Enable this to allocate video memory via coherent DMA.
NO_DMA_COHERENT              ?= 1

# Enable to start GPU clock in drver.
ENABLE_GPU_CLOCK_BY_DRIVER   ?= 1

# Enable platform driver model, available after linux 2.6.x.
USE_PLATFORM_DRIVER          ?= 1

# Build as vanilla Linux in Android environment with VDK backend.
USE_LINUX_MODE_FOR_ANDROID   ?= 0

# Force all video memory cached.
FORCE_ALL_VIDEO_MEMORY_CACHED ?= 0

# Enable caching for non paged memory.
NONPAGED_MEMORY_CACHEABLE    ?= 0

# Enable buffering for non paged memory
NONPAGED_MEMORY_BUFFERABLE   ?= 1

# Enable swap rectangle - EXPERIMENTAL
SUPPORT_SWAP_RECTANGLE       ?= 1

# Enable memory bank alignment
USE_BANK_ALIGNMENT           ?= 0
BANK_BIT_START               ?= 0
BANK_BIT_END                 ?= 0
BANK_CHANNEL_BIT             ?= 0

# Enable debug.
DEBUG                        ?= 0

# Build OpenCL
USE_OPENCL ?= 1

# Enable/disable deferred resolves for 3D apps - used for HWC - EXPERIMENTAL.
DEFER_RESOLVES               ?= 0

# CopyBlt Optimization - EXPERIMENTAL.
COPYBLT_OPTIMIZATION         ?= 0

# Use linear buffer for GPU apps.
ENABLE_LINEAR_BUFFER_FOR_GPU ?= 1

# Enable outer cache patch.
ENABLE_OUTER_CACHE_PATCH     ?= 1


# Enable/disable egl api android
ENABLE_EGL_API_ANDROID       ?= 1

# 2D VG
VIVANTE_ENABLE_VG := 0
################################################################################
# Variables.

GPU_TYPE  := unified_reg

PROPERTY  := \
	$(firstword \
		$(strip $(RO_HARDWARE)) \
		$(TARGET_BOOTLOADER_BOARD_NAME) \
		$(TARGET_BOARD_PLATFORM)\
		default \
	)

AQROOT    := $(call my-dir)
AQARCH    := $(AQROOT)/arch/$(GPU_TYPE)

ARCH_TYPE := arm
TAG       := MRVL
AQVGARCH  := $(AQROOT)/arch/GC350

export KERNEL_DIR
export CROSS_COMPILE


################################################################################
# Target CFLAGS.

CFLAGS        := -DLINUX

ifeq ($(ENABLE_EGL_API_ANDROID),1)
CFLAGS        += -DEGL_API_ANDROID=1
endif

ifeq ($(USE_LINUX_MODE_FOR_ANDROID),1)
CFLAGS        += -DUSE_VDK=1
else
CFLAGS        += -DUSE_VDK=0
endif

ifeq ($(SUPPORT_SWAP_RECTANGLE),1)
CFLAGS        += -DgcdSUPPORT_SWAP_RECTANGLE=1
endif

ifeq ($(DEFER_RESOLVES),1)
CFLAGS        += -DgcdDEFER_RESOLVES=1
endif

ifeq ($(COPYBLT_OPTIMIZATION),1)
CFLAGS        += -DgcdCOPYBLT_OPTIMIZATION=1
endif

PLATFORM_SDK_VERSION ?= 12

ifeq ($(ENABLE_LINEAR_BUFFER_FOR_GPU),1)
CFLAGS        += -DgcdGPU_LINEAR_BUFFER_ENABLED=1
endif

ifeq ($(ENABLE_OUTER_CACHE_PATCH),1)
CFLAGS        += -DgcdENABLE_OUTER_CACHE_PATCH=1
endif

ifeq ($(USE_BANK_ALIGNMENT), 1)
    CFLAGS += -DgcdENABLE_BANK_ALIGNMENT=1
    ifneq ($(BANK_BIT_START), 0)
	        ifneq ($(BANK_BIT_END), 0)
	            CFLAGS += -DgcdBANK_BIT_START=$(BANK_BIT_START)
	            CFLAGS += -DgcdBANK_BIT_END=$(BANK_BIT_END)
	        endif
    endif

    ifneq ($(BANK_CHANNEL_BIT), 0)
        CFLAGS += -DgcdBANK_CHANNEL_BIT=$(BANK_CHANNEL_BIT)
    endif
endif

CFLAGS        += -DANDROID_SDK_VERSION=$(PLATFORM_SDK_VERSION)
CFLAGS        += -fno-strict-aliasing -fno-short-enums
CFLAGS        += -Wall -Wno-missing-field-initializers -Wno-unused-parameter

ifeq ($(DEBUG), 1)
CFLAGS        += -DDBG=1 -DDEBUG -D_DEBUG -O0 -g
endif


ifeq ($(FORCE_ALL_VIDEO_MEMORY_CACHED), 1)
CFLAGS        += -DgcdPAGED_MEMORY_CACHEABLE=1
else
CFLAGS        += -DgcdPAGED_MEMORY_CACHEABLE=0
endif
